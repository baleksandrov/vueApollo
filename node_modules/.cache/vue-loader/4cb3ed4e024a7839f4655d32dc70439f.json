{"remainingRequest":"/home/bojidar/Desktop/graphQLvue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/bojidar/Desktop/graphQLvue/src/components/add-star.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/bojidar/Desktop/graphQLvue/src/components/add-star.vue","mtime":1559301675482},{"path":"/home/bojidar/Desktop/graphQLvue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bojidar/Desktop/graphQLvue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/bojidar/Desktop/graphQLvue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bojidar/Desktop/graphQLvue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { gql } from \"apollo-boost\";\nexport default {\n  props: [\"id\", \"refetch\"],\n  data: function() {\n    return {\n      addStar: gql`\n        mutation AddStar($repoid: ID!) {\n          addStar(input: { starrableId: $repoid }) {\n            starrable {\n              viewerHasStarred\n            }\n          }\n        }\n      `\n    };\n  },\n  methods: {\n    onDone: function() {\n      this.refetch();\n    }\n  }\n};\n",{"version":3,"sources":["add-star.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"add-star.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"addStar\">\n    <ApolloMutation :mutation=\"addStar\" :variables=\"{repoid:id}\" @done=\"onDone\">\n      <template slot-scope=\"{ mutate, loading, error }\">\n        <div v-if=\"loading\">Loading</div>\n        <button :disabled=\"loading\" @click=\"mutate()\">Add star</button>\n        <p v-if=\"error\">An error occured: {{ error }}</p>\n      </template>\n    </ApolloMutation>\n  </div>\n</template>\n\n<script>\nimport { gql } from \"apollo-boost\";\nexport default {\n  props: [\"id\", \"refetch\"],\n  data: function() {\n    return {\n      addStar: gql`\n        mutation AddStar($repoid: ID!) {\n          addStar(input: { starrableId: $repoid }) {\n            starrable {\n              viewerHasStarred\n            }\n          }\n        }\n      `\n    };\n  },\n  methods: {\n    onDone: function() {\n      this.refetch();\n    }\n  }\n};\n</script>\n"]}]}